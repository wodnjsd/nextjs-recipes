// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// any changes to database - npx prisma db push 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Recipe {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  ingredients  String[]
  instructions String[]
  cuisine     String
  comments     Comment[]
  tags         String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  author       User      @relation(fields: [userId], references: [externalId])
  likes        Like[]
  image        String?

  //*convention that collection in MongoDB has name that is lower case and plural
  @@map("recipes")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  externalId String    @unique
  name       String
  username   String?   @unique
  recipes    Recipe[]
  comments   Comment[]
  likes      Like[]

  @@map("users")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [externalId], onDelete: Cascade)
  recipeId  String   @db.ObjectId
  Recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String
  author    User     @relation(fields: [userId], references: [externalId], onDelete: Cascade)
  createdAt DateTime @default(now())
  recipeId  String   @db.ObjectId
  Recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("comments")
}
